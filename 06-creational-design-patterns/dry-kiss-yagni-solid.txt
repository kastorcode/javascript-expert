DRY - DON'T REPEAT YOURSELF
Não repita o mesmo código, crie uma classe/função e reutilize.

KISS - KEEP IT SIMPLE STUPID
Anti-patterns (padrão inadequado para aquele contexto), over-engineering (mais complicado do que deveria), spaghetti code (difícil de manter porque não tem uma estrutura bem definida).

YAGNI - YOU AREN'T GONNA NEED IT
Não perca tempo com features desnecessárias, foque no que é importante no presente.

SOLID - ACRÔNIMO DE 5 PRINCÍPIOS DE DESIGN QUE TEM A INTENÇÃO DE CRIAR SOFTWARE MAIS FLEXÍVEL E FÁCIL DE MANTER
Single Responsibility Principle: princípio da responsabilidade única, um módulo deve ter uma única razão para mudar;
Open/Closed Principle: princípio aberto/fechado, a entidade do sistema deve ser aberta para extensão e fechada para modificação;
Liskov Substitution Principle: princípio da substituição de Liskov, afirma que uma subclasse deve ser substituível pela sua superclasse sem alterar o comportamento do sistema;
Interface Segregation Principle: princípio de segregação de interface, os clientes não devem depender de classes que eles não usam;
Dependency Inversion Principle: princípio de inversão de dependência, classes devem depender de abstrações e nunca de implementações.

CLEAN CODE JS
https://github.com/ryanmcdermott/clean-code-javascript

EXEMPLOS
https://levelup.gitconnected.com/javascript-clean-code-solid-9d135f824180
https://dzone.com/articles/software-design-principles-dry-and-kiss
http://macoratti.net/15/12/net_yagni1.htm
https://en.wikipedia.org/wiki/Software_design_pattern
https://en.wikipedia.org/wiki/Anti-pattern
https://ezdevs.com.br/conhecendo-os-principios-do-solid
https://en.wikipedia.org/wiki/SOLID
https://ibm.com/developerworks/library/j-ft10/index.html
https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa
https://hackernoon.com/understanding-solid-principles-in-javascript-w1cx3yrv
https://sourcemaking.com/antipatterns